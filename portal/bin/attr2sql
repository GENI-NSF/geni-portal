#!/usr/bin/env python
# Mode: -*- python -*-

# Convert the attribute-map.xml file into a series of sql statements
# suitable for loading into a database.

import logging
import optparse
import sys
import xml.parsers.expat

def parse_attr_map(fname):
    """Parse the attribute-map.xml file"""
    all_attrs = set()
    def start_element(name, attrs):
        if name.lower() == 'attribute':
            try:
                all_attrs.add(attrs['id'])
            except:
                pass
    p = xml.parsers.expat.ParserCreate()
    p.StartElementHandler = start_element
    with open(fname, 'r') as f:
        p.ParseFile(f)
    return all_attrs

def emit_sql(opts, attrs):
    table = opts.table
    column = opts.column
    print 'START TRANSACTION;'
    print 'DELETE FROM %s;' % (table)
    for a in attrs:
        print 'INSERT INTO %s (%s) VALUES (\'%s\');' % (table, column, a)
    print 'COMMIT;'

def parse_args(argv):
    parser = optparse.OptionParser()
    parser.add_option("--debug", action="store_true", default=False,
                       help="enable debugging output")
    parser.add_option("--table", default='shib_attribute',
                       help="enable debugging output")
    parser.add_option("--column", default='name',
                       help="enable debugging output")
    return parser.parse_args()

def main(argv=None):
    if argv is None:
        argv = sys.argv
    (opts, args) = parse_args(argv)
    level = logging.INFO
    if opts.debug:
        level = logging.DEBUG
    logging.basicConfig(level=level)
    if len(args) < 1:
        print "no attribute file specified"
        return 2
    attrs = parse_attr_map(args[0])
    emit_sql(opts, attrs)

if __name__ == "__main__":
    sys.exit(main())
