#!/bin/sh
# -*- mode:sh -*-

#----------------------------------------------------------------------
# This is tailored script for creating a certificate for a pgeni3
# proxy. We need to generalize this capability to create proxy
# certificates for other AMs.
#
# The thing that makes this operation special is the URN. The URN
# needs to be the target AM, not a new one for the proxy. Why? To make
# flack insert the correct component manager id in the request so that
# the target AM fulfills the request instead of ignoring it. The
# target AM, if it is a ProtoGENI-based AM, ignores resources that
# have a different component manager id than its own. If Flack embeds
# the proxy component manager id, the target will think the request is
# for someone else and ignore it.
#
# An alternate path is to have the proxy rewrite the request to have
# the correct component manager id. I don't know how easy this would
# be or whether it would work in practice.
# ----------------------------------------------------------------------

if [ -z "$1" -o -z "$2" ]; then
    echo "Usage: sign-pgeni3-proxy-req <req file> <cert output file> <authority> [CA]" 1>&2
    exit 1
fi

REQ=$1
OUT=$2
AUTHORITY=$3


SHORT_HOST=`/bin/hostname -s`
FQDN=`/bin/hostname -f`

# FIX ME: Hardcoded pgeni3 URN
URN="URI:urn:publicid:IDN+pgeni3.gpolab.bbn.com+authority+cm"
UUID=`openssl req -in ${REQ} -text -noout | grep 'Subject:' | sed -e 's/.*CN=\([^/$]*\).*/\1/g'`
echo "first uuid = ${UUID}"
UUID="URI:uuid:${UUID}"
echo "second uuid = ${UUID}"
EXT_FILE=`/bin/mktemp`
EXT_NAME='v3_auth'
cat > "${EXT_FILE}" <<EOF
[$EXT_NAME]
subjectKeyIdentifier=hash
authorityKeyIdentifier=keyid:always,issuer:always
authorityInfoAccess = 2.25.305821105408246119474742976030998643995;URI:https://${FQDN}/ca.html
subjectAltName=email:copy,${URN},${UUID}
EOF

if [ -z "$4" -o "$4" != "CA" ]; then
    echo 'basicConstraints = CA:false' >> "${EXT_FILE}"
else
    echo 'basicConstraints = CA:true' >> "${EXT_FILE}"
fi

OPENSSL=/usr/bin/openssl
CONF=/usr/share/geni-ch/CA/openssl.cnf

# This is the policy in the $CONF file that checks fields for validity.
# Policy anything is not restrictive in any way.
POLICYARG="-policy policy_anything"

"${OPENSSL}" ca -config "${CONF}" ${POLICYARG} -batch -notext \
                -extfile "${EXT_FILE}" -extensions "${EXT_NAME}" \
                -in "${REQ}" -out "${OUT}"

/bin/rm "${EXT_FILE}"
