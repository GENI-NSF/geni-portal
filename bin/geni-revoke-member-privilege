#!/usr/bin/env python
# -*- Mode: python -*-
#
#----------------------------------------------------------------------
# Copyright (c) 2013 Raytheon BBN Technologies
#
# Permission is hereby granted, free of charge, to any person obtaining
# a copy of this software and/or hardware specification (the "Work") to
# deal in the Work without restriction, including without limitation the
# rights to use, copy, modify, merge, publish, distribute, sublicense,
# and/or sell copies of the Work, and to permit persons to whom the Work
# is furnished to do so, subject to the following conditions:
#
# The above copyright notice and this permission notice shall be
# included in all copies or substantial portions of the Work.
#
# THE WORK IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
# OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
# MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND
# NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT
# HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY,
# WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
# OUT OF OR IN CONNECTION WITH THE WORK OR THE USE OR OTHER DEALINGS
# IN THE WORK.
#----------------------------------------------------------------------

#----------------------------------------------------------------------
#
# Remove a privilege from a GENI user: Make them NOT a project lead or an operator
#
# Communicates with a GENI MEmber Authority via its public API
# Status indicates success or failure.
#
#----------------------------------------------------------------------

import sys
import logging
import optparse
from urlparse import urlparse
import uuid
from util import chapi

def init_logging(options):
    level = logging.INFO
    if options.debug:
        level = logging.DEBUG
    logging.basicConfig(level=level)

def check_result(result):
    if not 'code' in result:
        msg = "Invalid response from server: %r" % (result)
        sys.stderr.write(msg + "\n")
        exit(1)
    status = result['code']
    if not status == 0:
        if 'output' in result:
            msg = "Error: %s" % (result['output'])
        else:
            msg = "Error %d, no reason given" % (status)
        sys.stderr.write(msg + "\n")
        exit(1)
    return status

def parse_args(argv):
    parser = optparse.OptionParser()
    parser.add_option("--debug", action="store_true", default=False,
                       help="enable debugging output")
    parser.add_option("-k", "--keyfile", metavar="FILE",
                      help="Invoker's private key")
    parser.add_option("-c", "--certfile", metavar="FILE",
                      help="Invoker's GENI certificate")
    parser.add_option("-u", "--url", help="base URL")
    parser.add_option("-o", "--operator",  action="store_true", default=False,
                      help="remove operator privilege")
    parser.add_option("-l", "--lead",  action="store_true", default=False,
                      help="remove lead privilege")
    parser.add_option("-m", "--member", help="member id (a UUID)")
    options,args = parser.parse_args()
    if not (options.keyfile and options.certfile and options.url
            and options.member and (options.operator or options.lead)):
        parser.print_usage()
        raise Exception("Missing some required arguments")
    return options,args

def verify_url(url):
    parsed = urlparse(url)
    if (parsed.scheme in ('http', 'https')
        and parsed.netloc
        and parsed.path):
        return parsed.geturl()
    else:
        raise Exception("Invalid url %r" % (url))

def load_cert(certfile):
    f = open(certfile)
    cert = f.read()
    f.close()
    # Can we do additional tests to verify that this is an x509 cert?
    # Or will that be taken care of downstream, by the ch_interface?
    return cert

def load_private_key(certfile):
    f = open(certfile)
    key = f.read()
    f.close()
    # Can we do additional tests to verify that this is a private key?
    # Or will that be taken care of downstream, by the ch_interface?
    return key

def main(argv=None):
    if argv is None:
        argv = sys.argv
    try:
        options,args = parse_args(argv)
        init_logging(options)
        url = verify_url(chapi.service_url(options.url, 'MA'))
        cert = load_cert(options.certfile)
        pkey = load_private_key(options.keyfile)
    except Exception as e:
        sys.stderr.write(str(e) + "\n")
        return 1

    logger = logging.getLogger()
    member_id = chapi.find_member_id(options.member, url, logger, cert, pkey)
    if member_id is None:
        sys.stderr.write('Could not find member "'+options.member+'"\n')
        return -1

    print 'member_id '+options.member+' = '+member_id

    if options.operator:
        privilege = "OPERATOR"
    elif options.lead:
        privilege = "PROJECT_LEAD"
    proxy = chapi.make_proxy(url, cert, pkey)
    result = proxy.revoke_member_privilege(member_id, privilege, [], dict())

    print "%r" % (result)
    if not 'code' in result:
        msg = "Invalid response from server: %r" % (result)
        sys.stderr.write(msg + "\n")
        return 1
    status = result['code']
    if not status == 0:
        if 'output' in result:
            msg = "Error: %s" % (result['output'])
        else:
            msg = "Error %d, no reason given" % (status)
        sys.stderr.write(msg + "\n")
        return status
    return 0

if __name__ == "__main__":
    sys.exit(main())


# We need to integrate this code in - MSB/MT
#
#         # This matches ma_privilege values
#         privilege_id = 1

#     # if removing lead privileges, first find all projects for which member is lead
#         operation = "get_projects"
#         args = dict(lead_id=member_id)
#         result = ch.invokeCH(saurl, operation, logger, args, [cert], pkey)
#         ret = check_result(result)
#         # for each project, find an admin who is authorized to be lead 
#         # change the admin to lead and the lead to admin 
#         # if there is not an authorized admin for a project, exit
#         for project_id in result['value']:
#             auth_admin = None
#         # get project members
#             operation = "get_project_members"
#             args = dict(project_id=project_id)
#             mem_result = ch.invokeCH(saurl, operation, logger, args, [cert], pkey)
#             ret = check_result(mem_result)

#             for mem in mem_result['value']:
#                 auth_admin = None
#                 if mem['role'] == "2":
#                     # is this admin authorized to be lead?
#                     args = dict(principal=mem['member_id'],action="create_project",context_type=3)
#                     auth_result = ch.invokeCH(csurl,"request_authorization",logger,args,[cert],pkey)
#                     ret = check_result(auth_result)
#                     if auth_result['value']:
#                         auth_admin = mem['member_id']
#                         break

#             if auth_admin != None:
#                 sys.stderr.write("Changing authorized administrator %s to project lead for project %s.\n" %(auth_admin, project_id))
#                 sys.stderr.write("Changing project lead %s to member for project %s.\n" %(auth_admin,project_id))
#                 operation = "modify_project_membership"
#                 change_role = {}
#                 change_role[member_id] = 3
#                 change_role[auth_admin] = 1
#                 args = dict(project_id=project_id, members_to_remove=[], members_to_add=[],members_to_change_role = change_role)
#                 result = ch.invokeCH(saurl, operation, logger, args, [cert], pkey)                    
#                 ret = check_result(result)
#             else:
#                 sys.stderr.write("Can't remove lead from project %s unless there is an authorized administrator to take the lead role.\n" %project_id)
#                 return(1) 

   
#     operation = "revoke_member_privilege"

#     args = dict(member_id=member_id, privilege_id=privilege_id)
#     result = ch.invokeCH(maurl, operation, logger, args, [cert], pkey)
#     ret = check_result(result)
#     print("%r" %result)
#     print("\nRevoked privilege\n")
#     return ret

