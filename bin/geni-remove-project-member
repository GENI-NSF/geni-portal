#!/usr/bin/env python
# -*- Mode: python -*-
#
#----------------------------------------------------------------------
# Copyright (c) 2013 Raytheon BBN Technologies
#
# Permission is hereby granted, free of charge, to any person obtaining
# a copy of this software and/or hardware specification (the "Work") to
# deal in the Work without restriction, including without limitation the
# rights to use, copy, modify, merge, publish, distribute, sublicense,
# and/or sell copies of the Work, and to permit persons to whom the Work
# is furnished to do so, subject to the following conditions:
#
# The above copyright notice and this permission notice shall be
# included in all copies or substantial portions of the Work.
#
# THE WORK IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
# OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
# MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND
# NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT
# HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY,
# WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
# OUT OF OR IN CONNECTION WITH THE WORK OR THE USE OR OTHER DEALINGS
# IN THE WORK.
#----------------------------------------------------------------------

#----------------------------------------------------------------------
#
# Remove a GENI user from a GENI project.
#
# Communicates with a GENI Project Authority via its public API to
# remove a member from a project. Status indicates success or failure.
#
#----------------------------------------------------------------------

import sys
import logging
import optparse
from urlparse import urlparse
import uuid

# When gcf is properly installed, it should be in the sys.path. But we
# don't do that yet, thus this unfortunate hard-coded path.
sys.path.append('/usr/share/geni-ch/portal/gcf/src')
import geni.util.ch_interface as ch

def init_logging(options):
    level = logging.INFO
    if options.debug:
        level = logging.DEBUG
    logging.basicConfig(level=level)

def parse_args(argv):
    parser = optparse.OptionParser()
    parser.add_option("--debug", action="store_true", default=False,
                       help="enable debugging output")
    parser.add_option("-k", "--keyfile", metavar="FILE",
                      help="Invoker's private key")
    parser.add_option("-c", "--certfile", metavar="FILE",
                      help="Invoker's GENI certificate")
    parser.add_option("-u", "--url", help="authority URL")
    parser.add_option("-p", "--project", help="project id (UUID) or name")
    parser.add_option("-m", "--member", help="member id (UUID)")
    options,args = parser.parse_args()
    if not (options.keyfile and options.certfile and options.url
            and options.project and options.member):
        parser.print_usage()
        raise Exception("Missing some required arguments")
    return options,args

def verify_url(url):
    parsed = urlparse(url)
    if (parsed.scheme in ('http', 'https')
        and parsed.netloc
        and parsed.path):
        return parsed.geturl()
    else:
        raise Exception("Invalid url %r" % (url))

def load_cert(certfile):
    f = open(certfile)
    cert = f.read()
    f.close()
    # Can we do additional tests to verify that this is an x509 cert?
    # Or will that be taken care of downstream, by the ch_interface?
    return cert

def load_private_key(certfile):
    f = open(certfile)
    key = f.read()
    f.close()
    # Can we do additional tests to verify that this is a private key?
    # Or will that be taken care of downstream, by the ch_interface?
    return key

def load_project_id(project, url, cert, pkey):
    # Verify that it's a UUID.
    # In the future, could convert project name to UUID
    try:
        uuid.UUID(project)
        return project
    except ValueError:
        # Not a UUID. Try to resolve the project name
        operation = "lookup_project"
        logger = logging.getLogger()
        args = dict(project_name=project)
        result = ch.invokeCH(url, operation, logger, args, [cert], pkey)
        print "lookup_project = %r" % (result)
        result_code = result['code']
        result_value = result['value']
        if result_code == 0 and result_value:
            return result['value']['project_id']
        else:
            raise Exception("Invalid project id or name %r" % (project))

def load_member_id(member):
    # Verify that it's a UUID.
    # In the future, could convert member email to UUID
    try:
        uuid.UUID(member)
        return member
    except ValueError:
        raise Exception("Invalid member id %r, must be a UUID" % (member))

def main(argv=None):
    if argv is None:
        argv = sys.argv
    try:
        options,args = parse_args(argv)
        init_logging(options)
        url = verify_url(options.url)
        cert = load_cert(options.certfile)
        pkey = load_private_key(options.keyfile)
        project_id = load_project_id(options.project, url, cert, pkey)
        member_id = load_member_id(options.member)
    except Exception as e:
        sys.stderr.write(str(e) + "\n")
        return 1
    operation = "modify_project_membership"
    logger = logging.getLogger()
    args = dict(project_id=project_id, members_to_remove=[member_id])
    args
    result = ch.invokeCH(url, operation, logger, args, [cert], pkey)
    # print "%r" % (result)
    if not 'code' in result:
        msg = "Invalid response from server: %r" % (result)
        sys.stderr.write(msg + "\n")
        return 1
    status = result['code']
    if not status == 0:
        if 'output' in result:
            msg = "Error: %s" % (result['output'])
        else:
            msg = "Error %d, no reason given" % (status)
        sys.stderr.write(msg + "\n")
        return status
    return 0

if __name__ == "__main__":
    sys.exit(main())
