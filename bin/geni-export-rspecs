#!/usr/bin/env python
# -*- mode:python -*-

#----------------------------------------------------------------------
# Copyright (c) 2013 Raytheon BBN Technologies
#
# Permission is hereby granted, free of charge, to any person obtaining
# a copy of this software and/or hardware specification (the "Work") to
# deal in the Work without restriction, including without limitation the
# rights to use, copy, modify, merge, publish, distribute, sublicense,
# and/or sell copies of the Work, and to permit persons to whom the Work
# is furnished to do so, subject to the following conditions:
#
# The above copyright notice and this permission notice shall be
# included in all copies or substantial portions of the Work.
#
# THE WORK IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
# OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
# MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND
# NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT
# HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY,
# WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
# OUT OF OR IN CONNECTION WITH THE WORK OR THE USE OR OTHER DEALINGS
# IN THE WORK.
#----------------------------------------------------------------------

# Save all non private RSpecs in a given DB to separate files

import sys
import logging
import optparse
import csv
import psycopg2
import psycopg2.extras

class RSpec(object):
    VISIBILITY = 'visibility'
    ID = 'id'
    NAME = 'name'
    RSPEC = 'rspec'
    PUBLIC = 'public'
    PRIVATE = 'private'


def load_rspecs(conn):
    query = "select * from rspec order by id"
    cur = conn.cursor(cursor_factory=psycopg2.extras.DictCursor)
    cur.execute(query)
    fetchsize = 5
    rows = cur.fetchmany(fetchsize)
    while rows:
        for r in rows:
            if r[RSpec.VISIBILITY] == RSpec.PRIVATE:
                continue
            #print "Got %s rspec %d: %s" % (r['visibility'], r['id'], r['name'])
            fname = '%d-%s.xml' % (r[RSpec.ID], r[RSpec.NAME])
            print fname
            with open(fname, 'w') as f:
                f.write(r[RSpec.RSPEC])
        rows = cur.fetchmany(fetchsize)
    cur.close()

def init_logging(options):
    level = logging.INFO
    if options.debug:
        level = logging.DEBUG
    logging.basicConfig(level=level)

def parse_args(argv):
    parser = optparse.OptionParser(usage="Save all non private RSpecs in given DB to separate XML files")
    parser.add_option("--debug", action="store_true", default=False,
                       help="enable debugging output")
    parser.add_option("-d", "--database", default='portal',
                      help="database name")
    parser.add_option("--host", default='localhost',
                      help="database host")
    parser.add_option("-u", "--user", default='portal',
                      help="database user")
    parser.add_option("-p", "--password",
                      help="database password")
    parser.add_option("-P", "--password-file",
                      help="file containing database password")
    options,args = parser.parse_args()
#    if not (options.password or options.password_file):
#        parser.print_help()
#        raise Exception("Missing some required arguments")
    return options,args

def main(argv=None):
    if argv is None:
        argv = sys.argv
    try:
        options,args = parse_args(argv)
        init_logging(options)
    except Exception as e:
        sys.stderr.write(str(e) + "\n")
        return 1
    conn = psycopg2.connect(database=options.database,
                            user=options.user,
#                            password=password,
                            host=options.host)
    load_rspecs(conn)
    return 0

if __name__ == "__main__":
    sys.exit(main())
