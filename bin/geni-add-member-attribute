#!/usr/bin/env python
# -*- Mode: python -*-
#
#----------------------------------------------------------------------
# Copyright (c) 2013 Raytheon BBN Technologies
#
# Permission is hereby granted, free of charge, to any person obtaining
# a copy of this software and/or hardware specification (the "Work") to
# deal in the Work without restriction, including without limitation the
# rights to use, copy, modify, merge, publish, distribute, sublicense,
# and/or sell copies of the Work, and to permit persons to whom the Work
# is furnished to do so, subject to the following conditions:
#
# The above copyright notice and this permission notice shall be
# included in all copies or substantial portions of the Work.
#
# THE WORK IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
# OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
# MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND
# NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT
# HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY,
# WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
# OUT OF OR IN CONNECTION WITH THE WORK OR THE USE OR OTHER DEALINGS
# IN THE WORK.
#----------------------------------------------------------------------

#----------------------------------------------------------------------
#
# Add an arbitrary attribute to the given member in the ma_member_attribute table
#
# Communicates with a GENI Member Authority via its public API
#
#----------------------------------------------------------------------

import sys
import logging
import optparse
import psycopg2
import psycopg2.extras
from urlparse import urlparse
import uuid

# When gcf is properly installed, it should be in the sys.path. But we
# don't do that yet, thus this unfortunate hard-coded path.
sys.path.append('/usr/share/geni-ch/portal/gcf/src')
import geni.util.ch_interface as ch

def init_logging(options):
    level = logging.INFO
    if options.debug:
        level = logging.DEBUG
    logging.basicConfig(level=level)

def parse_args(argv):
    parser = optparse.OptionParser()
    parser.add_option("--debug", action="store_true", default=False,
                       help="enable debugging output")
    parser.add_option("-k", "--keyfile", metavar="FILE",
                      help="Invoker's private key")
    parser.add_option("-c", "--certfile", metavar="FILE",
                      help="Invoker's GENI certificate")
    parser.add_option("-l", "--url", help="member authority URL")
    parser.add_option("-m", "--member", help="member id (a UUID or username)")
    parser.add_option("-d", "--database", default='portal',
                      help="database name")
    parser.add_option("--host", default='localhost',
                      help="database host")
    parser.add_option("-u", "--user", default='portal',
                      help="database user")
    parser.add_option("-p", "--password",
                      help="database password")
    parser.add_option("-P", "--password-file",
                      help="file containing database password")
    parser.add_option("-a", "--attribute", help="Name of attribute to add")
    parser.add_option("--value", default="true", help="Value of attribute to add if important")
    options,args = parser.parse_args()
    if not (options.keyfile and options.certfile and options.url and options.attribute
            and options.member and (options.password or options.password_file)):
        parser.print_usage()
        raise Exception("Missing some required arguments")
    return options,args

def verify_url(url):
    parsed = urlparse(url)
    if (parsed.scheme in ('http', 'https')
        and parsed.netloc
        and parsed.path):
        return parsed.geturl()
    else:
        raise Exception("Invalid url %r" % (url))

def load_cert(certfile):
    f = open(certfile)
    cert = f.read()
    f.close()
    # Can we do additional tests to verify that this is an x509 cert?
    # Or will that be taken care of downstream, by the ch_interface?
    return cert

def load_private_key(certfile):
    f = open(certfile)
    key = f.read()
    f.close()
    # Can we do additional tests to verify that this is a private key?
    # Or will that be taken care of downstream, by the ch_interface?
    return key

def get_database_password(options):
    if options.password:
        return options.password
    if options.password_file:
        f = open(options.password_file, 'r')
        password = f.readlines()[0].strip()
        f.close()
        return password

def find_member_id(member, url, logger, cert, pkey):
    # Verify that it's a UUID.
    try:
        uuid.UUID(member)
        return member
    except ValueError:
#        raise Exception("Invalid member id %r, must be a UUID" % (member))
        pass
    # In the future, try to figure out if 'member' is a URN or email address
    args = dict(attributes=[dict(name='username', value=member)])
    result = ch.invokeCH(url, 'lookup_members', logger, args, [cert], pkey)
    # parse the result
    # NOTE: Not enough error checking here.
    if not 'code' in result:
        return None
    status = result['code']
    if not status == 0:
        return None
    matches = result['value']
    if not matches or len(matches) < 1:
        return None
    first_match = matches[0]
    member_id = first_match['member_id']
    return member_id

def main(argv=None):
    if argv is None:
        argv = sys.argv
    try:
        options,args = parse_args(argv)
        init_logging(options)
        url = verify_url(options.url)
        cert = load_cert(options.certfile)
        pkey = load_private_key(options.keyfile)
    except Exception as e:
        sys.stderr.write(str(e) + "\n")
        return 1
    logger = logging.getLogger()
    member_id = find_member_id(options.member, url, logger, cert, pkey)
    if member_id is None:
        print "ERROR: Member %s not found" % options.member
        return 1
    password = get_database_password(options)
    conn = psycopg2.connect(database=options.database,
                            user=options.user,
                            password=password,
                            host=options.host)

#    print "found member_id %s" % member_id
    cur = conn.cursor(cursor_factory=psycopg2.extras.DictCursor)
    hasEntry = False
    selsql = "select * from ma_member_attribute where member_id = %s and name = %s and value = %s";
    data = (member_id, options.attribute, options.value,)
    try:
        cur.execute(selsql, data)
        #print "Did: %s" % cur.query
        if cur.rowcount > 0:
            hasEntry = True
    except Exception, e:
        print cur.query
        print "ERROR: Doing  %s: Got %s: %s" % (selsql, e.pgcode, e.pgerror)

    if not hasEntry:
        sql = "insert into ma_member_attribute (member_id, name, value, self_asserted) values (%s, %s, %s, false)";
        data = (member_id, options.attribute, options.value,)
        try:
            cur.execute(sql, data)
#            print "Did: %s" % cur.query
            print "For member %s added attribute %s=%s" % (options.member, options.attribute, options.value)
        except Exception, e:
            print cur.query
            print "ERROR: Doing  %s: Got %s: %s" % (sql, e.pgcode, e.pgerror)
    else:
        print "User %s already has attribute %s=%s" % (options.member, options.attribute, options.value)

    conn.commit()
    cur.close()
    conn.close()

    return 0

if __name__ == "__main__":
    sys.exit(main())
