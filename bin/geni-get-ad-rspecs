#!/usr/bin/env python
# -*- Mode: python -*-
#
#----------------------------------------------------------------------
# Copyright (c) 2014 Raytheon BBN Technologies
#
# Permission is hereby granted, free of charge, to any person obtaining
# a copy of this software and/or hardware specification (the "Work") to
# deal in the Work without restriction, including without limitation the
# rights to use, copy, modify, merge, publish, distribute, sublicense,
# and/or sell copies of the Work, and to permit persons to whom the Work
# is furnished to do so, subject to the following conditions:
#
# The above copyright notice and this permission notice shall be
# included in all copies or substantial portions of the Work.
#
# THE WORK IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
# OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
# MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND
# NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT
# HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY,
# WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
# OUT OF OR IN CONNECTION WITH THE WORK OR THE USE OR OTHER DEALINGS
# IN THE WORK.
#----------------------------------------------------------------------

#----------------------------------------------------------------------
#
# Query all AMs in the SR for advertisement RSpecs
#
# Performs the following functions:
#   1) Queries the service registry for a list of AMs
#   2) Calls omni listresources for each AM and downloads ad RSpecs
#   3) Verifies downloaded RSpecs to check for valid XML structure and data
#
#----------------------------------------------------------------------

import sys
import logging
import optparse
import psycopg2
import psycopg2.extras
from xml.dom import minidom
import glob
import tempfile

sys.path.append('/usr/local/bin/gcf/src')
sys.path.append('/usr/share/geni-ch/portal/gcf/src')
import gcf.oscript as omni
from gcf.omnilib.util.omnierror import OmniError
from gcf.omnilib.util.files import *

TEMP_DIR = os.path.join(tempfile.gettempdir(), "rspecs")
AM_SERVICE_TYPE = "0"
logger = logging.getLogger()

def init_logging(options):
    if options.silent:
        level = logging.ERROR
    elif options.debug:
        level = logging.DEBUG
    else:
        level = logging.INFO
    logging.basicConfig(level=level)

def parse_args(argv):
    parser = optparse.OptionParser(usage="Query all AMs in the SR for advertisement RSpecs")
    parser.add_option("--debug", action="store_true", default=False,
                       help="enable debugging output")
    parser.add_option("--silent", action="store_true", default=False,
                       help="enable silent mode (only show errors)")
    parser.add_option("--cleanup", action="store_true", default=False,
                       help="delete invalid RSpecs at the end")
    parser.add_option("-c", "--configfile", metavar="FILE",
                      help="Filename for `omni_config` (required)")
    parser.add_option("-s", "--save", metavar="DIRECTORY", default='./',
                      help="Directory to save ad RSpecs (default is `./`)")
    parser.add_option("-d", "--database", default='portal',
                      help="database name (default is `portal`)")
    parser.add_option("--host", default='localhost',
                      help="database host (default is `localhost`)")
    parser.add_option("-u", "--user", default='portal',
                      help="database user (default is `portal`)")
    options,args = parser.parse_args()
    if not (options.configfile):
        parser.print_usage()
        raise Exception("Missing some required arguments")
    return options,args

# check whether RSpec has something in it
# return false if file cannot be parsed or no <rspec...> element is found
def rspec_has_contents(filepath):
    try:
        xmlfile = minidom.parse(filepath)
    except Exception as e:
        logger.error("Couldn't parse %s" % filepath)
        return False
    # check that <rspec...> occurs somewhere
    rspecs = xmlfile.getElementsByTagName('rspec')
    if rspecs:
        logger.debug("Found rspec element(s) in %s" % filepath)
        return True
    else:
        logger.error("Couldn't find rspec element(s) in %s" % filepath)
        return False
    
# move RSpec from temporary location to permanent location
# if new RSpec has contents, overwrite (or write new) file; else, do nothing
def move_rspec(movefrom, moveto):
    if rspec_has_contents(movefrom):
        try:
            if not os.path.exists(os.path.dirname(moveto)):
                os.makedirs(os.path.dirname(moveto))
            os.rename(movefrom, moveto)
        except IOError as e:
            logger.error('Couldn\'t move %s to %s: %s' % (movefrom, moveto, e))
        else:
            logger.debug("Moved %s to %s" % (movefrom, moveto))
    else:
        logger.error("Couldn't move %s to %s" % (movefrom, moveto))

# delete all XML files in a given directory
def clean_directory(directory):
    for xmlfile in glob.glob(os.path.join(directory, "*.xml")):
        if os.path.isfile(xmlfile):
            os.remove(xmlfile)
            logger.debug("Deleted %s" % xmlfile)

# attempt to connect to database
# returns connection and cursor variables
def connect_to_database(database, user, host):
    try:
        conn = psycopg2.connect(database=database,
                                user=user,
                                host=host)
    except:
        raise Exception("Could not connect to database.")
    logger.info("Established connection to database '%s' on %s." 
            % (database, host))
    return (conn, conn.cursor(cursor_factory=psycopg2.extras.DictCursor))

# close database connection
def disconnect_from_database(conn, cur):
    cur.close()
    conn.close()
    logger.info("Closed connection to database.")

# query the service registry for list of URLs of AMs
def query_sr_for_ams(cur):
    select_sql = 'SELECT * FROM service_registry WHERE service_type = %s'
    cur.execute(select_sql, (AM_SERVICE_TYPE))
    records = cur.fetchall()
    if not records:
        raise Exception("Found no AMs in the service registry.")
    return records

# download each AM's ad RSpec to TEMP_DIR
def download_rspecs(records, omni_config_file, save_directory):
    logger.info("Starting downloading of RSpecs.")
    for record in records:
        service_url = record['service_url']
        service_urn = record['service_urn']
        prefix = os.path.join(save_directory, "ad")
        omniargs = ['-c', omni_config_file, '-a', service_url, '-o', 
                '-V2', 'listresources', '-p', prefix]
        logger.debug("Calling omni using the arguments: %s" % (omniargs))
        try:
            text, retItem = omni.call(omniargs, None)
            # if item exists, if it's of type dictionary, and one key is returned
            if retItem and isinstance(retItem, dict) and len(retItem.keys()) == 1:
                rspec = retItem[retItem.keys()[0]]
                logger.debug("RSpec returned from %s." % service_urn)
            else:
                logger.error("No RSpec returned from %s." % service_urn)
        except OmniError as oe:
            logger.error("Omni call failed when trying %s: %s" % 
                    (service_urn,oe))
    logger.info("Downloading complete.")

# verify downloaded data is legitimate
# only move over files to user specified directory that are valid
def verify_downloaded_rspecs(movefrom_directory, moveto_directory):
    logger.info("Starting verification of downloaded RSpecs.")
    for movefrom_filepath in glob.glob(os.path.join(movefrom_directory, "*.xml")):
        movefrom_filename = os.path.basename(movefrom_filepath)
        moveto_filepath = os.path.join(moveto_directory, movefrom_filename)
        if not os.path.exists(moveto_directory):
            os.makedirs(moveto_directory)
        # verification done in move_rspec()
        move_rspec(movefrom_filepath, moveto_filepath)
    logger.info("Verification complete.")

def main(argv=None):
    if argv is None:
        argv = sys.argv
    try:
        options,args = parse_args(argv)
        init_logging(options)
    except Exception as e:
        sys.stderr.write(str(e) + "\n")
        return 1
    
    (conn, cur) = connect_to_database(options.database, 
            options.user, options.host)
    clean_directory(TEMP_DIR)
    download_rspecs(query_sr_for_ams(cur), options.configfile, TEMP_DIR)
    verify_downloaded_rspecs(TEMP_DIR, options.save)
    disconnect_from_database(conn, cur)
    if options.cleanup:
        clean_directory(TEMP_DIR)

if __name__ == "__main__":
    sys.exit(main())
