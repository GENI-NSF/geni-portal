#!/usr/bin/env python
# -*- Mode: python -*-
#
# ----------------------------------------------------------------------
# Copyright (c) 2014-2016 Raytheon BBN Technologies
#
# Permission is hereby granted, free of charge, to any person obtaining
# a copy of this software and/or hardware specification (the "Work") to
# deal in the Work without restriction, including without limitation the
# rights to use, copy, modify, merge, publish, distribute, sublicense,
# and/or sell copies of the Work, and to permit persons to whom the Work
# is furnished to do so, subject to the following conditions:
#
# The above copyright notice and this permission notice shall be
# included in all copies or substantial portions of the Work.
#
# THE WORK IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
# OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
# MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND
# NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT
# HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY,
# WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
# OUT OF OR IN CONNECTION WITH THE WORK OR THE USE OR OTHER DEALINGS
# IN THE WORK.
# ----------------------------------------------------------------------

# ----------------------------------------------------------------------
#
# Generate GeoJSON map data from parsing advertisement RSpecs
#
# ----------------------------------------------------------------------

import sys
import os
import logging
import optparse
import json
import re
import xml.sax
import glob
import xmlrpclib

DEFAULT_SR_URL = 'https://ch.geni.net:8444/SR'
AM_SERVICE_TYPE = 0
logger = logging.getLogger()

NS_RSPEC = u'http://www.geni.net/resources/rspec/3'
NS_OPENFLOW = u'http://www.geni.net/resources/rspec/ext/openflow/3'


class GeniResponse(object):
    CODE = 'code'
    VALUE = 'value'
    OUTPUT = 'output'


# class for a GENI resource
class GENIResource:
    def __init__(self):
        self.am = ""
        self.am_id = ""
        self.type = "unknown"
        self.name = ""
        self.id = ""
        self.latitude = None
        self.longitude = None

    def toGeoJSON(self):
        return dict(
            type='Feature',
            properties=dict(
                component_id=self.name,
                resources=1,
                am=self.am,
                am_id=self.am_id,
                type=self.type
                ),
            geometry=dict(
                type='Point',
                coordinates=[self.longitude, self.latitude]),
        )

    def set_agg_name(self, aggNameMap):
        if self.am_id in aggNameMap:
            self.am = aggNameMap[self.am_id]
        else:
            logger.debug("Component %r agg id %r not in aggregate names",
                         self.id, self.am_id)

    def set_type(self):
        """Make a best guess about the resource type.

        Does this even matter any more? We're not matching anything
        here, everything is labeled as 'unknown'.
        """
        if 'pc' in self.name:
            return 'pc'
        elif 'pg' in self.name:
            return 'pc'
        elif 'compute' in self.name:
            return 'pc'
        elif 'procurve' in self.name:
            return 'switch'
        elif 'cisco' in self.name:
            return 'switch'
        else:
            # print self.name
            return 'unknown'


class DatapathHandler(xml.sax.handler.ContentHandler):

    MANAGER_ID = u'component_manager_id'
    COMPONENT_ID = u'component_id'
    DPID = u'dpid'
    LATITUDE = u'latitude'
    LONGITUDE = u'longitude'
    LOCATION = u'location'

    def safe_get_attr(self, attrs, qname, default):
        logger.debug('names = %r', attrs.getNames())
        logger.debug('qnames = %r', attrs.getQNames())
        if qname in attrs.getQNames():
            return attrs.getValueByQName(qname)
        else:
            return default

    def __init__(self, name, qname, attrs):
        self.resource = GENIResource()
        self.resource.am_id = \
            self.safe_get_attr(attrs, DatapathHandler.MANAGER_ID, None)
        self.resource.id = \
            self.safe_get_attr(attrs, DatapathHandler.COMPONENT_ID, None)
        self.resource.name = \
            self.safe_get_attr(attrs, DatapathHandler.DPID, None)

    def startElementNS(self, name, qname, attrs):
        if name == (NS_OPENFLOW, DatapathHandler.LOCATION):
            self.resource.longitude = \
                self.safe_get_attr(attrs, DatapathHandler.LONGITUDE, None)
            self.resource.latitude = \
                self.safe_get_attr(attrs, DatapathHandler.LATITUDE, None)
        else:
            logger.debug("DatapathHandler.startElementNS(%r)", name)


class NodeHandler(xml.sax.handler.ContentHandler):

    MANAGER_ID = u'component_manager_id'
    COMPONENT_ID = u'component_id'
    COMPONENT_NAME = u'component_name'
    LATITUDE = u'latitude'
    LONGITUDE = u'longitude'

    ELEM_LOCATION = u'location'

    def safe_get_attr(self, attrs, qname, default):
        logger.debug('names = %r', attrs.getNames())
        logger.debug('qnames = %r', attrs.getQNames())
        if qname in attrs.getQNames():
            return attrs.getValueByQName(qname)
        else:
            return default

    def __init__(self, name, qname, attrs):
        self.resource = GENIResource()
        # print attrs.getNames()
        self.resource.am_id = self.safe_get_attr(attrs,
                                                 NodeHandler.MANAGER_ID,
                                                 None)
        self.resource.id = self.safe_get_attr(attrs,
                                              NodeHandler.COMPONENT_ID,
                                              None)
        self.resource.name = self.safe_get_attr(attrs,
                                                NodeHandler.COMPONENT_NAME,
                                                None)

    def startElementNS(self, name, qname, attrs):
        if name == (NS_RSPEC, NodeHandler.ELEM_LOCATION):
            self.resource.longitude = self.safe_get_attr(attrs,
                                                         NodeHandler.LONGITUDE,
                                                         None)
            self.resource.latitude = self.safe_get_attr(attrs,
                                                        NodeHandler.LATITUDE,
                                                        None)
        else:
            logger.debug("NodeHandler.startElementNS(%r)", name)


class RspecHandler(xml.sax.handler.ContentHandler):

    NODE = u'node'
    DATAPATH = u'datapath'

    def __init__(self):
        self.delegate = None
        self.resources = []

    def startElementNS(self, name, qname, attrs):
        # logger.debug("rspec startElementNS(%r)", name)
        if self.delegate:
            self.delegate.startElementNS(name, qname, attrs)
        elif name == (NS_RSPEC, RspecHandler.NODE):
            logger.debug("Found node tag")
            self.delegate = NodeHandler(name, qname, attrs)
        elif name == (NS_OPENFLOW, RspecHandler.DATAPATH):
            logger.debug("Found datapath tag")
            self.delegate = DatapathHandler(name, qname, attrs)
        else:
            logger.debug("Unknown rspec startElement: %r", name)

    def endElementNS(self, name, qname):
        # logger.debug("rspec endElement(%r)", name)
        if (name == (NS_RSPEC, RspecHandler.NODE) or
                name == (NS_OPENFLOW, RspecHandler.DATAPATH)):
            if (self.delegate):
                rsrc = self.delegate.resource
                if rsrc.id:
                    self.resources.append(rsrc)
                logger.debug("node resources: %r" % (self.delegate.resource))
                self.delegate = None
            else:
                logger.info("Why no delegate in RspecHandler.endElement?")


class AdvertisementHandler(xml.sax.handler.ContentHandler):
    """Parse an advertisement RSpec via SAX API.
    """

    def __init__(self):
        self.delegate = None
        self.resources = []

    def startElementNS(self, name, qname, attrs):
        # logger.debug("name = %r", name)
        # logger.debug("qname = %r", qname)
        if self.delegate:
            self.delegate.startElementNS(name, qname, attrs)
        elif name == (NS_RSPEC, u'rspec'):
            logger.debug("Found rspec tag")
            self.delegate = RspecHandler()
        else:
            logger.debug("Unknown ad startElement: %r", name)

    def endElementNS(self, name, qname):
        if self.delegate:
            self.delegate.endElementNS(name, qname)
        if name == (NS_RSPEC, u'rspec'):
            if (self.delegate):
                self.resources.extend(self.delegate.resources)
                self.delegate = None
            else:
                msg = 'Why no delegate in AdvertisementHandler.endElement?'
                logger.info(msg)


def init_logging(options):
    if options.silent:
        level = logging.ERROR
    elif options.debug:
        level = logging.DEBUG
    else:
        level = logging.INFO
    logging.basicConfig(level=level)


def parse_args(argv):
    usage = 'Generate GeoJSON map data from parsing advertisement RSpecs'
    parser = optparse.OptionParser(usage=usage)
    parser.add_option("--debug", action="store_true", default=False,
                      help="enable debugging output")
    parser.add_option("--silent", action="store_true", default=False,
                      help="enable silent mode (only show errors)")
    parser.add_option("-s", "--save", metavar="DIRECTORY", default='./',
                      help="Directory of saved ad RSpecs (default is `./`)")
    default = 'current.json'
    help_txt = 'Filename for JSON output (default is %r)' % (default)
    parser.add_option("-o", "--output", default=default, help=help_txt)
    help_txt = "service registry URL (default is %r)" % DEFAULT_SR_URL
    parser.add_option("-u", "--url", default=DEFAULT_SR_URL,
                      help=help_txt)
    return parser.parse_args()


# (Geo)JSON stuff
def write_to_geojson_file(resources, output_file):
    JSONarray = {'type': 'FeatureCollection', 'features': []}
    JSONarray['features'].extend(resources)
    try:
        f = open(output_file, "w")
        f.write(json.dumps(JSONarray, default=lambda o: o.toGeoJSON(),
                           indent=4))
        f.close()
    except IOError as e:
        logger.error("Could not write output to %s: %s" % (output_file, e))
    else:
        logger.info("Wrote GeoJSON output to %s." % output_file)


# open connection to DB once to get all AM URN/name data as key/value pairs
def get_am_names(sr_url):
    sr_proxy = xmlrpclib.ServerProxy(sr_url)
    response = sr_proxy.get_services_of_type(AM_SERVICE_TYPE)

    # Work around https://github.com/GENI-NSF/geni-ch/issues/516
    if GeniResponse.CODE in response:
        aggs = response[GeniResponse.VALUE]
    else:
        aggs = response
    return {a['SERVICE_URN']: a['SERVICE_NAME'] for a in aggs}


# look through all RSpecs in a directory for GENI resources
def search_rspecs_for_resources(rspecs_directory, cur):

    resources = []
    ams_dictionary = get_am_names(cur)

    for filepath in glob.glob(os.path.join(rspecs_directory, "*.xml")):
        logger.info("Starting parse of %s" % filepath)
        try:
            adHandler = AdvertisementHandler()
            xml_parser = xml.sax.make_parser()
            xml_parser.setContentHandler(adHandler)
            xml_parser.setFeature(xml.sax.handler.feature_namespaces, True)
            xml_parser.parse(filepath)
        except Exception as e:
            logger.error("Could not parse %s" % filepath)
            raise
            continue
        resources.extend(adHandler.resources)

    # Is an exception really the best way to handle a failure to
    # parse any resources?
    if not resources:
        raise Exception("No resources found in %s. Quitting."
                        % rspecs_directory)

    # Resource post-processing. Look up aggregate pretty name and
    # set the type. Setting the type appears to be a dubious operation,
    # see GENIResource.set_type for more.
    for resource in resources:
        resource.set_agg_name(ams_dictionary)
        resource.set_type()
    return resources


def main(argv=None):
    if argv is None:
        argv = sys.argv
    try:
        options, args = parse_args(argv)
        init_logging(options)
    except Exception as e:
        sys.stderr.write(str(e) + "\n")
        return 1

    resources = search_rspecs_for_resources(options.save, options.url)
    write_to_geojson_file(resources, options.output)

if __name__ == "__main__":
    sys.exit(main())
