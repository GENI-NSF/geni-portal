#!/usr/bin/env python
# -*- Mode: Python -*-

# A script to find and report on stale omni processes
#
# Written hastily before GEC 19. If this lives on, perhaps rename it
# to geni-watch-omni, add it to the Makefile for installation, and add
# few parameters like how many minutes before a process is considered
# stale?

import ConfigParser
import datetime
import getpass
import time
import smtplib
from email.mime.text import MIMEText
import psutil

# 5 minutes for now
STALE_LIMIT_SECONDS = 5 * 60

def get_admin_email():
    config = ConfigParser.RawConfigParser()
    config.read('/etc/geni-chapi/chapi.ini')
    sec = 'chapi'
    opt = 'portal_admin_email'
    if config.has_option(sec, opt):
        return config.get(sec, opt)
    else:
        return 'portal-sandbox-admin'

def send_report(stale_pids, stale_report):
    """Email the stale omni report."""
    if not stale_pids:
        return

    msg = "Found %d stale omni processes\n" % (len(stale_pids))
    msg = msg + "\n"
    msg = msg + '\n'.join(stale_report)
    msg = msg + "\n"
    # Join the pids into a string
    msg = msg + "sudo kill %s" % (' '.join([str(p) for p in stale_pids]))
    msg = msg + "\n"

    # Create a text/plain message
    mime_msg = MIMEText(msg)

    # me == the sender's email address
    me = getpass.getuser()
    # you == the recipient's email address
    you = get_admin_email()
    mime_msg['Subject'] = 'stale omni report'
    mime_msg['From'] = me
    mime_msg['To'] = you

    # Send the message via our own SMTP server, but don't include the
    # envelope header.
    s = smtplib.SMTP('localhost')
    s.sendmail(me, [you], mime_msg.as_string())
    s.quit()


# If launch time was before stale_launch_time,
# the process is stale
stale_launch_time = time.time() - STALE_LIMIT_SECONDS

# A list of stale omni pids
stale_pids = []

# A list of strings to report
stale_report = []

# For later version of psutil use 'psutil.pids()'
allpids = psutil.get_pid_list()
for pid in allpids:
    try:
        p = psutil.Process(pid)
        # For later version of psutil use 'p.create_time()'
        create_time = int(p.create_time)
        # For later version of psutil use 'p.cmdline()'
        cmd = p.cmdline
        pid = p.pid
    except psutil.error.NoSuchProcess:
        # Sometimes the process goes away since we got allpids
        # Continue to next pid
        continue
    except IOError:
        # A process that has finished may also exhibit an
        # IOError when reading the /proc filesystem
        continue
    if (len(cmd) > 1
        and cmd[0] == '/usr/bin/python'
        and 'omni_php.py' in cmd[1]
        and create_time < stale_launch_time):
        # We have a stale omni process
        agg = None
        if '-a' in cmd:
            agg = cmd[cmd.index('-a') + 1]
        launch_dt = datetime.datetime.fromtimestamp(create_time)
        launch_time = launch_dt.isoformat()
        stale_report.append('%s %s %s' % (pid, launch_time, agg))
        stale_pids.append(pid)

send_report(stale_pids, stale_report)