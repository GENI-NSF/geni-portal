#!/usr/bin/env python
# -*- Mode: python -*-

#----------------------------------------------------------------------
# Copyright (c) 2013-2015 Raytheon BBN Technologies
#
# Permission is hereby granted, free of charge, to any person obtaining
# a copy of this software and/or hardware specification (the "Work") to
# deal in the Work without restriction, including without limitation the
# rights to use, copy, modify, merge, publish, distribute, sublicense,
# and/or sell copies of the Work, and to permit persons to whom the Work
# is furnished to do so, subject to the following conditions:
#
# The above copyright notice and this permission notice shall be
# included in all copies or substantial portions of the Work.
#
# THE WORK IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
# OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
# MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND
# NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT
# HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY,
# WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
# OUT OF OR IN CONNECTION WITH THE WORK OR THE USE OR OTHER DEALINGS
# IN THE WORK.
#----------------------------------------------------------------------
import sys
import logging
import optparse
import psycopg2

def init_logging(options):
    level = logging.INFO
    if options.debug:
        level = logging.DEBUG
    logging.basicConfig(level=level)

def get_database_password(options):
    if options.password:
        return options.password
    if options.password_file:
        f = open(options.password_file, 'r')
        password = f.readlines()[0].strip()
        f.close()
        return password
    return None

def parse_args(argv):
    usage = "usage: %prog [options] client_name client_urn"
    parser = optparse.OptionParser(usage=usage)
    parser.add_option("--debug", action="store_true", default=False,
                       help="enable debugging output")
    parser.add_option("-d", "--database", default='portal',
                      help="database name")
    parser.add_option("--host", default='localhost',
                      help="database host")
    parser.add_option("-u", "--user", default='portal',
                      help="database user")
    parser.add_option("-p", "--password",
                      help="database password")
    parser.add_option("-P", "--password-file",
                      help="file containing database password")
    options,args = parser.parse_args()
    if len(args) < 2:
        parser.print_usage()
        sys.exit(2)
    return options,args

def main(argv=None):
    if argv is None:
        argv = sys.argv
    try:
        options,args = parse_args(argv)
        init_logging(options)
    except Exception as e:
        sys.stderr.write(str(e) + "\n")
        return 1
    client_name = args[0]
    client_urn = args[1]
    connect_args = dict(database=options.database,
                        user=options.user,
                        host=options.host)
    password = get_database_password(options)
    if password:
        connect_args['password'] = password

    # FIXME: Is this entry already in the DB? Then bail

    query = 'INSERT INTO ma_client (client_name, client_urn) VALUES (%s, %s)'
    try:
        conn = psycopg2.connect(**connect_args)
        cur = conn.cursor()
        cur.execute(query, (client_name, client_urn))
        # FIXME: Check: did this do an insert?
        cur.close()
        conn.commit()
    except psycopg2.Error as e:
        msg = "Trusted tool NOT added. Database error: %s\n" % (str(e))
        sys.stderr.write(msg)
        return 1
    sys.stderr.write("Added %s as a trusted tool\n" % client_name)
    return 0

if __name__ == "__main__":
    sys.exit(main())
